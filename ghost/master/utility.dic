IsMinimized
{
	"minimizing" _in_ status
}

BalloonIsOpen
{
	"balloon" _in_ status
}

emdash
{
	"\f[name,calibri]â€”\f[name,default]"
}

br
{
	//Hydrate does not use autopause, no need for the new form. At least, not currently
	if SHIORI3FW.BalloonName == "H2O"; "\n"
	else; " "
}

ASUB //ASEARCH but for substrings
{
	_array = _argv
	_array[0] = IARRAY //erase first element since that's the string we're searching for
	for _i = 0; _i < ARRAYSIZE(_array); _i++
	{
		if _argv[0] _in_ _array[_i]
		{
			_i
			return
		}
	}
	-1
}

RuntimeDisplay
{
	_runtime = (GETSECCOUNT - opentime) / 60
	_hours = _runtime / 60
	_minutes = _runtime % 60
	if _minutes < 10; _minutes = "0%(_minutes)"
	
	"%(_hours):%(_minutes)"
}

TalkRateLabel
{
	_num = TOINT(_argv[0])
	if _num <= 0; {"Off"; return}
	
	//Singular form, plural form, number of seconds
	_units = ( /
	"hour,hours,3600",/
	"minute,minutes,60",/
	"second,seconds,1"/
	)
	
	_output = ""
	foreach _units; _unit
	{
		_duration = TOINT(_unit[2])
		_amt = _num / _duration
		_num = _num % _duration
		
		if _amt > 0
		{
			if _output != ""
			{
				if _num == 0
				{
					if "," _in_ _output; _output += ","
					_output += " and "
				}
				else; _output += ", "
			}
			
			//The second function call here handles whether the unit name should be displayed as plural or not, depending on if the amount of that unit is greater than 1
			_output += "%(_amt) %(_unit[_amt > 1])"
		}
		if _num <= 0; break
	}
	_output
}

//This is in MILLISECONDS
TimeoutInterval
{
	_num = 300 //5 minute timeout default
	if aitalkinterval <= 300 //drink reminders at 5 minutes or less
	{
		_num = aitalkinterval - 60 //1 minute less than drink reminder time
		if _num < 60; _num = 30 //if drink reminders are every minute, time out every half a minute
	}
	_num * 1000
}

Wobble
{
	//Default values - Set these to whatever you'd like, you can override them for each individual dialogue if you like
	_UPlow = 0		//Controls if letters are randomly converted to upper/lowercase. 0 for off, 1 for on.
	_Xjitter = 5	//Controls how much space can be between each letter. Higher numbers will be more spaced out.
	_Yjitter = 5	//Controls how much letters can vary up and down. Higher numbers will be more spaced out.
	_SizeJitter = 0 //Controls how much the font size can change per letter. Higher numbers will have more extreme variance.
	_SizeUpDown = 1 //Controls if the font size can go up, down, or both. 0 for both, 1 for up, 2 for down.
	
	if _argv[1] != ""; _UPlow = _argv[1] //These check if the user has sent special arguments, and if not, uses the default values
	if _argv[2] != ""; _Xjitter = _argv[2]
	if _argv[3] != ""; _Yjitter = _argv[3]
	if _argv[4] != ""; _SizeJitter = _argv[4]
	if _argv[5] != ""; _SizeUpDown = _argv[5]
	
	_word = "" //Initialize display
	for _i = 0; _i < STRLEN(_argv[0]); _i++
	{
		_let = SUBSTR(_argv[0],_i,1) //Get the current letter
		if TOINT(_UPlow) == 1 //If random upper/lower is on, flip a coin to determine which this letter will be
		{
			if RAND(2) == 1; _let = TOUPPER(_let); else; _let = TOLOWER(_let)
		}
		_X = RAND(_Xjitter) //Get random values for X, Y, and Size
		_Y = RAND(_Yjitter)
		_Sz = RAND(_SizeJitter)
		if _SizeUpDown == 1 //Size only goes up
		{
			_Sz = "+" + _Sz
		}
		elseif _SizeUpDown == 2 //Size only goes down
		{
			_Sz = "-" + _Sz
		}
		else //Flip a coin on if the size should go up or down
		{
			if RAND(2) == 1; _Sz = "+" + _Sz; else; _Sz = "-" + _Sz 
		}
		_word += "\_l[@%(_X),%(_Y)]\f[height,%(_Sz)]" + _let //Add to the display
	}
	_word
}

//Example: ErrorLog("Some debug info","info")
ErrorLog
{
	//Create arrays if none exist
	if !ISVAR("ErrorsToPush.level"); ErrorsToPush.level = IARRAY
	if !ISVAR("ErrorsToPush.description"); ErrorsToPush.description = IARRAY
	
	_level = "warning" //It defaults to warning if it doesn't recognize what you've put in, so I will too
	if _argv[1] != ""; _level = _argv[1]
	
	ErrorsToPush.level ,= _level
	ErrorsToPush.description ,= _argv[0]
}

notification_sound : all
{
	if !ISVAR("volume"); volume = 50
	if !ISVAR("notif"); notif = "None"
	
	//Skip if empty, or if set to custom and also empty...
	if !(notif == "None" || notif == "" || (notif == "Custom" && custom_sound_path == ""))
	{
		"\![sound,play,"""
		
		if notif == "Custom"
		{
			custom_sound_path
		}
		elseif notif == "Random"
		{
			_opts = ("Water_Drop","Bubbles","Splash","Campana","Stop","Success")
			_opts = "snd/" + _opts + ".mp3"
			if Config.IncludeCustomSound && custom_sound_path != ""; _opts ,= custom_sound_path
			ANY(_opts)
		}
		else
		{
			"snd/" + REPLACE(notif," ","_") + ".mp3"
		}
		
		""",--volume=%(volume),--window=false]"
	}
}