//—————————————————————————————— Update notification ——————————————————————————————
OnMouseDoubleClick : all
{
	if reference5 == 0 //Left click
	{
		//If an update is available, the user will be notified when they try to open the menu
		if AutoUpdates.GhostReady == 1 || AutoUpdates.ShellReady == 1 || AutoUpdates.BalloonReady == 1 
		{
			"\0\b[0]\_q"
			"(Updates are available for:)"
			"\n\n"
			
			if AutoUpdates.GhostReady == 1; "(Hydrate)\n"
			if AutoUpdates.ShellReady == 1; "('%(SHIORI3FW.ShellName)' shell)\n"
			if AutoUpdates.BalloonReady == 1; "('%(SHIORI3FW.BalloonName)' balloon)\n"
			
			"\n"
			"\![*]\__q[OnStartUpdate]Download updates now\__q\n"
			"\![*]\__q[OnUpdateLater]Maybe later\__q\n\n"
			"\![*]\__q[OnUpdateOff]Turn off auto updates\__q"
		}
		else; OnMainMenu
	}
}

OnUpdateLater //If the user decides to update later
{
	AutoUpdates.CheckedToday = 1
	AutoUpdates.GhostReady = 0
	AutoUpdates.ShellReady = 0
	AutoUpdates.BalloonReady = 0
	
	OnMainMenu
}

OnUpdateOff //If the user no longer wants to be notified about updates
{
	Config.AutoUpdates = 0
	AutoUpdates.CheckedToday = 1
	AutoUpdates.GhostReady = 0
	AutoUpdates.ShellReady = 0
	AutoUpdates.BalloonReady = 0
	
	"\0\s[0]\_q(Auto Update checks turned off, you can turn them on again in the Config menu.)\x\![raise,OnMainMenu]"
}


//—————————————————————————————— Main menu ——————————————————————————————
OnMainMenu : all
{
	"\0\![set,autoscroll,disable]\b[2]\_q"
	
	"\![*]\__q[OnExtraSip]I took an extra sip!\__q\n"
	"\![*]\__q[OnPause]Pause drink reminders\__q\n\n"
	"\![*]\__q[OnShellMenu]Change shell\__q"
	
	if ARRAYSIZE(dressups.available) > 0; "\n\![*]\__q[OnDressupMenu]Change dressups\__q"

	"\n\n"
	"\![*]\__q[OnWaterStats]Stats\__q\n"
	"\![*]\__q[OnConfigMenu]Config\__q\n\n"
	"\![*]\__q[OnBlank]Done\__q"
	
	"\n\n[half]"
	_s = ""; if Stats.DrinksToday != 1; _s = "s"
	"%(Stats.DrinksToday) drink%(_s) taken this session!"
	
	if Stats.CurrentDrinkStreak >= 3; "\n%(Stats.CurrentDrinkStreak) drinks in a row!"
	
	"\n\f[height,-2]"
	if aitalkinterval > 0
	{
		if GETSECCOUNT - SHIORI3FW.LastAITalkTime >= aitalkinterval; "Next reminder imminent"
		else
		{
			"Next reminder in %(ReminderTimeDisplay)"
		}
	}
	else; "Reminders are off"
	"\n"
	"Runtime: %(RuntimeDisplay)\n"
	"Version %(ghostver)"
}

OnExtraSip
{
	Stats.ExtraSipsToday++
	Stats.ExtraSipsTotal++
	
	OnSendStats
	--
	"\0(That's awesome,\w4 good job!)"
	"\0(Good going,\w4 well done!)"
	"\0(Noted,\w4 keep up the good work!)"
	"\0(Great!\w4 1 extra sip added to your total!)"
}


//—————————————————————————————— Pause menu ——————————————————————————————
OnPause : all
{
	_time = TOINT(reference0)
	_seconds = _time % 60
	_minutes = _time / 60
	_hours = _minutes / 60
	_minutes %= 60
	
	"\C\![lock,balloonrepaint]\c\0\_q\*\t\b[2]\![set,autoscroll,disable]"
	
	"\f[height,+2]\f[bold,1](Drink reminders are paused!)\f[bold,0]\f[height,default]\n\n"
	
	"(Until you close this menu, you will not be given drink reminders, and your streak will not be broken.)\n\n"
	
	"\![*]\__q[OnResume]Resume reminders\__q\n\n"
	
	"\f[bold,1]Paused for: "
	if _hours < 10; "0"
	"%(_hours):"
	if _minutes < 10; "0"
	"%(_minutes):"
	if _seconds < 10; "0"
	"%(_seconds)"
	
	"\![unlock,balloonrepaint]\![timerraise,1000,1,OnPause,%(_time + 1)]"
}

OnResume
{
	"\0\![timerraise,0,0,OnPause](Hydration resumed!)"
}


//—————————————————————————————— Shell menu ——————————————————————————————
OnShellMenu : all
{
	_display = ""
	foreach ShellList; _shell
	{
		if _shell == SHIORI3FW.ShellName; _display += "\![*]"
		_display += "\__q[OnSwitchShell,%(_shell)]%(_shell)\__q\n"
	}
	
	"\0\*\_q\![set,autoscroll,disable]"
	
	"\f[align,center]%(emdash) Shells %(emdash)\n\f[align,left]"
	
	if ARRAYSIZE(ShellList) > 16; "\b[4]\![*]\__q[OnMainMenu]Back\__q\n"
	elseif ARRAYSIZE(ShellList) > 11; "\b[4]"
	else; "\b[2]"
	
	"\![*]\__q[OnRandomShell]Random shell\__q\n"
	"\![*]\__q[OnShellUrl]Download more shells\__q"
	"\n\n"
	"%(_display)"
	"\n"
	"\![*]\__q[OnMainMenu]Back\__q\n"
	"\![*]\__q[OnBlank]Done\__q"
}

OnRandomShell
{
	"\![change,shell,random,--option=raise-event]"
}

OnShellUrl
{
	"\C\j[https://ukagaka.zichqec.com/ghost/hydrate]"
}

OnSwitchShell
{
	"\![change,shell,""%(reference0)"",--option=raise-event]"
}


//—————————————————————————————— Dressup menu ——————————————————————————————
//I feel like I could and maybe probably should split this into two distinct functions, but it would require a little retooling of the random dressup function...
OnDressupMenu : all
{
	_display = ""
	_currentcategories = IARRAY
	
	foreach dressups.available; _dressup
	{
		_category = _dressup[0,C_BYTE1]
		
		if ASEARCH(_category,_currentcategories) == -1
		{
			_currentcategories ,= _category
			_display += "\__q[OnDressupMenu.Category,%(_category)]%(_category)\__q\n"
		}
	}
	
	"\C\![lock,balloonrepaint]\c"
	"\0\*\_q\![set,autoscroll,disable]"
	
	"\f[align,center]%(emdash) Dressups %(emdash)\n\f[align,left]"
	
	if ARRAYSIZE(_currentcategories) > 18; "\b[4]\![*]\__q[OnMainMenu]Back\__q\n"
	elseif ARRAYSIZE(_currentcategories) > 11; "\b[4]"
	else; "\b[2]"
	
	"\![*]\__q[OnRandomDressup,,OnDressupMenu]Randomize all categories\__q"
	
	"\n\n"
	"%(_display)"
	"\n"
	
	"\![*]\__q[OnMainMenu]Back\__q\n"
	"\![*]\__q[OnBlank]Done\__q"
	"\![unlock,balloonrepaint]"
}

OnDressupMenu.Category : all
{
	_display = ""
	_items = 0
	
	foreach dressups.available; _dressup
	{
		_category = _dressup[0,C_BYTE1]
		_name = _dressup[1,C_BYTE1]
		
		if _category == reference0 //If this item matches the current category
		{
			_items++
			if ASEARCH("%(_category)%(C_BYTE1)%(_name)",dressups.current) != -1; _display += "\![*]"
			_display += "\__q[OnChangeDesign,%(_category),%(_name)]%(_name)\__q\n"
		}
	}
	
	"\C\![lock,balloonrepaint]\c"
	"\0\*\_q\![set,autoscroll,disable]"
	
	"\f[align,center]%(emdash) %(reference0) %(emdash)\n\f[align,left]"
	
	if _items > 18; "\b[4]\![*]\__q[OnDressupMenu]Back\__q\n"
	elseif _items > 11; "\b[4]"
	else; "\b[2]"
	
	"\![*]\__q[OnRandomDressup,%(reference0),OnDressupMenu.Category]Random\__q"
	
	"\n\n"
	"%(_display)"
	"\n"
	
	"\![*]\__q[OnDressupMenu]Back\__q\n"
	"\![*]\__q[OnBlank]Done\__q"
	"\![unlock,balloonrepaint]"
}

OnChangeDesign
{
	"\C\![set,autoscroll,disable]\0\_q\![bind,%(reference0),%(reference1)]\![set,balloonwait,0.01] \![raise,OnDressupMenu.Category,%(reference0)]" //TODO here, like the one below...
}


//—————————————————————————————— Stats menu ——————————————————————————————
OnWaterStats : all
{
	_h = "\f[color,default.anchor]"
	_d = "\f[color,default]"
	if SHIORI3FW.BalloonName == "H2O"
	{
		_h = "\f[bold,1]"
		_d = "\f[bold,default]"
	}
	
	"\0\*\b[4]\_q\![set,autoscroll,disable]"
	
	"\f[align,center]%(emdash) Stats %(emdash)\n\n\f[align,default]"
	
	_s = ""; if Stats.DrinksToday != 1; _s = "s"
	"\![*]%(_h)%(Stats.DrinksToday)%(_d) drink%(_s) taken this session\n"
	
	_s = ""; if Stats.DrinksTotal != 1; _s = "s"
	"\![*]%(_h)%(Stats.DrinksTotal)%(_d) drink%(_s) taken in total\n"
	"\n"
	
	_s = ""; if Stats.CurrentDrinkStreak != 1; _s = "s"
	"\![*]Currently on a streak of %(_h)%(Stats.CurrentDrinkStreak)%(_d) drink%(_s)\n"
	
	_s = ""; if Stats.HighestDrinkStreak != 1; _s = "s"
	"\![*]Your highest drink streak is %(_h)%(Stats.HighestDrinkStreak)%(_d) drink%(_s)\n"
	"\n"
	
	_s = ""; if Stats.ExtraSipsToday != 1; _s = "s"
	"\![*]%(_h)%(Stats.ExtraSipsToday)%(_d) extra sip%(_s) taken today\n"
	
	_s = ""; if Stats.ExtraSipsTotal != 1; _s = "s"
	"\![*]%(_h)%(Stats.ExtraSipsTotal)%(_d) extra sip%(_s) taken in total\n\n"
	
	StatsComment
	
	"\n\n"
	"\![*]\__q[OnMainMenu]Back\__q\n"
	"\![*]\__q[OnBlank]Done\__q"
}

StatsComment : nonoverlap_pool
{
	"(You're doing awesome, keep it up!)"
	"(Good job, keep going!)"
	"(You've got this!)"
	"(Heck yeah!)"
	"(Look at you go!)"
}


//—————————————————————————————— Config menu ——————————————————————————————
OnConfigMenu : all
{
	_b = ""; _d = ""
	if SHIORI3FW.BalloonName == "H2O"
	{
		_b = "\f[bold,1]"
		_d = "\f[bold,default]"
	}
	"\C\![lock,balloonrepaint]\c"
	"\![close,inputbox,OnDrinkTime]"
	"\0\b[4]\_q\f[anchorvisitedfontcolor,default.anchor]\![set,autoscroll,disable]"
	
	"\f[align,center]%(emdash) Config %(emdash)\n\f[align,default]"
	
	"\![*]Reminder rate:%(br)%(_b)\_a[OnChangeTalk]%(TalkRateLabel(aitalkinterval))\_a%(_d)\n"
	"\![*]Sound: %(_b)\_a[OnChangeNotif]%(Config.NotificationSound)\_a%(_d)\n"
	"\![*]Reminders while minimized: %(_b)\_a[OnToggleRemindWhenMinimized]%(('Off','On')[Config.RemindWhenMinimized])\_a%(_d)\n"
	"\n"
	
	"\![*]Match position when changing shells: %(_b)\_a[OnToggleMatchShellPosition]%(('Off','On')[Config.MatchShellPosition])\_a%(_d)\n"
	
	_shellchange = REPLACE(Config.AutoShellChange,"interval","%(TalkRateLabel(Config.AutoShellMinutes * 60))")
	"\![*]Auto shell change:%(br)%(_b)\_a[OnConfig.AutoShell]%(_shellchange)\_a%(_d)\n"
	
	_dressupchange = REPLACE(Config.AutoDressupChange,"interval","%(TalkRateLabel(Config.AutoDressupMinutes * 60))")
	"\![*]Auto dressup change:%(br)%(_b)\_a[OnConfig.AutoDressup]%(_dressupchange)\_a%(_d)\n"
	"\n"
	
	"Auto update checks: \![*]%(_b)\_a[OnToggleAutoUpdates]%(('Off','On')[Config.AutoUpdates])\_a%(_d)\n"
	"Update...\n"
	"\![*]\__q[OnUpdateCheck,ghost]Ghost\__q  \![*]\__q[OnUpdateCheck,shell]Shell\__q  \![*]\__q[OnUpdateCheck,balloon]Balloon\__q\n"
	"\n"
	
	//"\![*]\__q[OnChangeLog,FromMenu]See the changelog\__q\n\n"
	
	"\![*]\__q[OnConfig.Legacy]Legacy content\__q\n\n"
	
	"\![*]\__q[OnMainMenu]Back\__q\n"
	"\![*]\__q[OnBlank]Done\__q"
	"\![unlock,balloonrepaint]"
}

OnChangeTalk : all
{
	"\0\s[0]\_q\![open,inputbox,OnDrinkTime,-1]\![set,balloontimeout,-1]"
	
	"(How many minutes would you like between reminders? "
	switch aitalkinterval == 0
	{
		"Currently set to %(TalkRateLabel(aitalkinterval)).)"
		"Reminders are currently off.)"
	}
	"\n\n"
	"(To turn reminders off, enter a 0.)"
	"\n\n"
	"\![*]\__q[OnConfigMenu]Cancel\__q"
}

OnDrinkTime : all
{
	"\C\![lock,balloonrepaint]\c"
	
	if reference0 >= 0 && GETTYPE(reference0) == 1
	{
		aitalkinterval = (reference0 * 60)
		
		"\![unlock,balloonrepaint]"
		OnConfigMenu
	}
	else
	{
		"\0\s[0]\_q\![open,inputbox,OnDrinkTime,-1]\![set,balloontimeout,-1]"
		
		"(Invalid input. Please enter a positive integer, or 0 to turn reminders off.)"
		"\![unlock,balloonrepaint]\x\![raise,OnChangeTalk]"
	}
}

//———————————————————— Notification sound submenu ————————————————————
OnChangeNotif : all
{
	_opts = ("Water Drop","Bubbles","Splash","Campana","Stop","Success")
	
	_g = "\f[color,disable]"
	_d = "\f[color,default]"
	
	_b = ""; _bd = ""
	if SHIORI3FW.BalloonName == "H2O"
	{
		_b = "\f[bold,1]"
		_bd = "\f[bold,default]"
	}
	
	_vol_up = "\__q[OnQuickVolume,Up]▲\__q"
	if Config.NotificationVolume >= 100; _vol_up = "%(_g)▲%(_d)"
	_vol_down = "\__q[OnQuickVolume,Down]▼\__q"
	if Config.NotificationVolume <= 0; _vol_down = "%(_g)▼%(_d)"
	
	"\C\![lock,balloonrepaint]\c"
	"\![close,dialog,OnPickCustomNotif]"
	"\0\b[2]\_q\![set,autoscroll,disable]\*"
	
	"\f[align,center]%(emdash) Reminder sound %(emdash)\n\f[align,left]"
	
	"Volume: %(_vol_up)%(_vol_down) %(Config.NotificationVolume)\n\n"
	
	if Config.NotificationSound == "None"; "\![*]"
	"\__q[OnNotifSet,None]None\__q\n"
	
	if Config.NotificationSound == "Custom"; "\![*]"
	"\__q[OnNotifSet,Custom]Custom\__q  \__q[OnCustomNotif](Pick sound)\__q\n"
	
	if Config.NotificationSound == "Random"; "\![*]"
	"\__q[OnNotifSet,Random]Random each time\__q\n"
	"\__q[OnToggleIncludeCustom](Custom %(_b)%(('excluded','included')[Config.IncludeCustomSound])%(_bd))\__q\n\n[half]"
	
	foreach _opts; _opt
	{
		if Config.NotificationSound == _opt; "\![*]"
		"\__q[OnNotifSet,%(_opt)]%(_opt)\__q\n"
	}
	"\n"
	
	"\![*]\__q[OnConfigMenu]Back\__q"
	"\![unlock,balloonrepaint]"
}

//Up/Down volume buttons
OnQuickVolume
{
	_new = Config.NotificationVolume
	
	if reference0 == "Up"; _new += 5
	else; _new -= 5
	
	if _new > 100; _new = 100
	if _new < 0; _new = 0
	
	Config.NotificationVolume = _new
	
	OnChangeNotif
}

OnNotifSet
{
	Config.NotificationSound = reference0
	"\C\![sound,stop]%(notification_sound)\![raise,OnChangeNotif]"
}

OnCustomNotif : all
{
	_h = "\f[color,default.anchor]"
	_d = "\f[color,default]"
	_b = ""
	_bd = ""
	if SHIORI3FW.BalloonName == "H2O"
	{
		_h = "\f[bold,1]"
		_d = "\f[bold,default]"
		_b = "\f[bold,1]"
		_bd = "\f[bold,default]"
	}
	
	"\0\_q\b[2]\![set,autoscroll,disable]\![open,dialog,open,--id=OnPickCustomNotif]\*"
	
	"(Choose a sound file. Supported types are %(_h).mp3%(_d),%(br)%(_h).wav%(_d), %(_h).wma%(_d), and %(_h).mid%(_d).)\n\n"
	
	"(If sound files give an error, or you would like access to more file types including%(br)%(_h).flac%(_d), %(_h).ogg%(_d), or %(_h).m4a%(_d), please consider installing%(br)%(_b)\_a[https://github.com/Nevcairiel/LAVFilters/releases]LAV Filters\_a%(_bd).)\n\n"
	
	"\![*]\__q[OnChangeNotif]Cancel\__q"
}

OnPickCustomNotif
{
	Config.NotificationSound = "Custom"
	Config.NotificationCustomPath = reference2
	"\C\![sound,stop]%(notification_sound)\![raise,OnChangeNotif]"
}

OnToggleIncludeCustom
{
	if Config.IncludeCustomSound != 1; Config.IncludeCustomSound = 1
	else; Config.IncludeCustomSound = 0
	OnChangeNotif
}
//———————————————————————————————————————————————————————————————————


OnToggleRemindWhenMinimized
{
	if Config.RemindWhenMinimized != 1; Config.RemindWhenMinimized = 1
	else; Config.RemindWhenMinimized = 0
	OnConfigMenu
}

OnToggleMatchShellPosition
{
	if Config.MatchShellPosition != 1; Config.MatchShellPosition = 1
	else; Config.MatchShellPosition = 0
	OnConfigMenu
}


//———————————————————— Auto shell change submenu ————————————————————
OnConfig.AutoShell : all
{
	"\C\![lock,balloonrepaint]\c"
	"\0\b[2]\_q\![set,autoscroll,disable]\*"
	"\![close,inputbox,OnConfig.AutoShell.MinuteSet]"
	
	"\f[align,center]%(emdash) Auto shell change %(emdash)\n\n\f[align,left]"
	
	"\![*]\__q[OnConfig.AutoShell.Set,Off]Off\__q\n"
	"\![*]\__q[OnConfig.AutoShell.Set,On boot]On boot\__q\n"
	"\![*]\__q[OnConfig.AutoShell.Set,After a drink]After a drink\__q\n"
	_s = "s"; if Config.AutoShellMinutes == 1; _s = ""
	"\![*]\__q[OnConfig.AutoShell.Set,Every interval]Every %(TalkRateLabel(Config.AutoShellMinutes * 60))\__q\n"
	"\__q[OnConfig.AutoShell.MinuteChange](Change rate)\__q\n"
	"\n"
	
	"\![*]\__q[OnConfigMenu]Back\__q"
	"\![unlock,balloonrepaint]"
}

OnConfig.AutoShell.Set
{
	Config.AutoShellChange = reference0
	AutoShell.LastChangeTime = GETSECCOUNT
	OnConfigMenu
}

OnConfig.AutoShell.MinuteChange : all
{
	"\C\![lock,balloonrepaint]\c"
	"\0\b[2]\s[0]\_q"
	"\![open,inputbox,OnConfig.AutoShell.MinuteSet,-1]\![set,balloontimeout,-1]"
	
	_s = "s"; if Config.AutoShellMinutes == 1; _s = ""
	"(How many minutes would you like between shell changes? Currently set to %(TalkRateLabel(Config.AutoShellMinutes * 60)).)\n\n"
	"(Note that the timer is reset each session.)"
	"\n\n"
	
	"\![*]\__q[OnConfig.AutoShell]Cancel\__q"
	"\![unlock,balloonrepaint]"
}

OnConfig.AutoShell.MinuteSet : all
{
	if TOINT(reference0) > 0
	{
		Config.AutoShellMinutes = TOINT(reference0)
		AutoShell.LastChangeTime = GETSECCOUNT
		OnConfig.AutoShell
	}
	else
	{
		"\C\![lock,balloonrepaint]\c"
		"\0\b[0]\s[0]\_q"
		"(Invalid time. Please input an integer greater than 0.)"
		"\![unlock,balloonrepaint]\x\![raise,OnConfig.AutoShell.MinuteChange]"
	}
}


//———————————————————— Auto dressup change submenu ————————————————————
OnConfig.AutoDressup : all
{
	"\C\![lock,balloonrepaint]\c"
	"\0\b[2]\_q\![set,autoscroll,disable]\*"
	"\![close,inputbox,OnConfig.AutoDressup.MinuteSet]"
	"\f[align,center]%(emdash) Auto dressup change %(emdash)\n\n\f[align,left]"
	
	"\![*]\__q[OnConfig.AutoDressup.Set,Off]Off\__q\n"
	"\![*]\__q[OnConfig.AutoDressup.Set,On boot]On boot\__q\n"
	"\![*]\__q[OnConfig.AutoDressup.Set,After a drink]After a drink\__q\n"
	_s = "s"; if Config.AutoDressupMinutes == 1; _s = ""
	"\![*]\__q[OnConfig.AutoDressup.Set,Every interval]Every %(TalkRateLabel(Config.AutoDressupMinutes * 60))\__q\n"
	"\__q[OnConfig.AutoDressup.MinuteChange](Change rate)\__q\n"
	"\![*]\__q[OnConfig.AutoDressup.Set,When shell changes]When shell changes\__q\n"
	"\n"
	
	"\![*]\__q[OnConfigMenu]Back\__q"
	"\![unlock,balloonrepaint]"
}

OnConfig.AutoDressup.Set
{
	Config.AutoDressupChange = reference0
	AutoDressup.LastChangeTime = GETSECCOUNT
	OnConfigMenu
}

OnConfig.AutoDressup.MinuteChange : all
{
	"\C\![lock,balloonrepaint]\c"
	"\0\b[2]\s[0]\_q"
	"\![open,inputbox,OnConfig.AutoDressup.MinuteSet,-1]\![set,balloontimeout,-1]"
	
	_s = "s"; if Config.AutoDressupMinutes == 1; _s = ""
	"(How many minutes would you like between dressup changes? Currently set to %(TalkRateLabel(Config.AutoDressupMinutes * 60)).)\n\n"
	"(Note that the timer is reset each session and any time the shell changes.)"
	"\n\n"
	
	"\![*]\__q[OnConfig.AutoDressup]Cancel\__q"
	"\![unlock,balloonrepaint]"
}

OnConfig.AutoDressup.MinuteSet : all
{
	if TOINT(reference0) > 0
	{
		Config.AutoDressupMinutes = TOINT(reference0)
		AutoDressup.LastChangeTime = GETSECCOUNT
		OnConfig.AutoDressup
	}
	else
	{
		"\C\![lock,balloonrepaint]\c"
		"\0\b[0]\s[0]\_q"
		"(Invalid time. Please input an integer greater than 0.)"
		"\![unlock,balloonrepaint]\x\![raise,OnConfig.AutoDressup.MinuteChange]"
	}
}
//———————————————————————————————————————————————————————————————————


OnToggleAutoUpdates
{
	if Config.AutoUpdates != 1; Config.AutoUpdates = 1
	else; Config.AutoUpdates = 0
	
	OnConfigMenu
}

OnUpdateCheck
{
	if reference0 == "ghost"; "\![updatebymyself]"
	elseif reference0 == "balloon"; "\![update,balloon]"
	else; "\![update,shell]"
}

//———————————————————— Legacy settings submenu ————————————————————
OnConfig.Legacy : all
{
	legacyreloadlatch = 0
	
	_b = ""; _d = ""
	if SHIORI3FW.BalloonName == "H2O"
	{
		_b = "\f[bold,1]"
		_d = "\f[bold,default]"
	}
	
	"\C\![lock,balloonrepaint]\c"
	"\0\b[4]\_q\![set,autoscroll,disable]\*"
	"\f[align,center]%(emdash) Legacy content %(emdash)\n\n\f[align,left]"
	
	"\![*]Shell change comments:%(br)%(_b)\_a[OnToggleShellChangeComments]%(('Off','On')[Config.ShellChangeComments])\_a%(_d)\n"
	"\![*]Hour notifications: %(_b)\_a[OnToggleHourNotifs]%(('Off','On')[Config.HourNotifs])\_a%(_d)\n"
	"\![*]Offscreen notifs: %(_b)\_a[OnToggleOffscreenTalk]%(('Off','On')[Config.OffscreenDialogue])\_a%(_d)\n"
	"\![*]Enable uninstall: %(_b)\_a[OnToggleUninstall]%(('Off','On')[Config.EnableUninstall])\_a%(_d)\n"
	"\n"
	"Right click menu:\n"
	"\![*]Encouragement: %(_b)\_a[OnToggleRightClickEncouragement]%(('Off','On')[Config.RightClickEncouragement])\_a%(_d)\n"
	"\![*]Water facts: %(_b)\_a[OnToggleRightClickWaterFacts]%(('Off','On')[Config.RightClickWaterFacts])\_a%(_d)\n"
	"(These require %(_b)\_a[OnConfig.Legacy.Reload]reload\_a%(_d) to take effect)\n"
	//Note to future me: It seems like the string it uses for the right click menu is based on the FIRST TIME you open it that session.
	//Additionally, when you turn these settings ON, you only need to reload the shiori, but to turn them off you have to reload the ghost... what a pain!
	//TODO i would like to improve this
	"\n"
	
	"\![*]\__q[OnConfigMenu]Back\__q\n"
	"\![*]\__q[OnBlank]Done\__q"
	"\![unlock,balloonrepaint]"
}

OnToggleShellChangeComments
{
	if Config.ShellChangeComments != 1; Config.ShellChangeComments = 1
	else; Config.ShellChangeComments = 0
	OnConfig.Legacy
}

OnToggleHourNotifs
{
	if Config.HourNotifs != 1; Config.HourNotifs = 1
	else; Config.HourNotifs = 0
	OnConfig.Legacy
}

OnToggleOffscreenTalk
{
	if Config.OffscreenDialogue != 1; Config.OffscreenDialogue = 1
	else; Config.OffscreenDialogue = 0
	OnConfig.Legacy
}

OnToggleUninstall
{
	if Config.EnableUninstall != 1; Config.EnableUninstall = 1
	else; Config.EnableUninstall = 0
	OnConfig.Legacy
}

OnToggleRightClickEncouragement
{
	if Config.RightClickEncouragement != 1; Config.RightClickEncouragement = 1
	else; Config.RightClickEncouragement = 0
	OnConfig.Legacy
}

OnToggleRightClickWaterFacts
{
	if Config.RightClickWaterFacts != 1; Config.RightClickWaterFacts = 1
	else; Config.RightClickWaterFacts = 0
	OnConfig.Legacy
}

OnConfig.Legacy.Reload
{
	legacyreloadlatch = 1
	"\![reload,ghost]"
}

//———————————————————————————————————————————————————————————————————