OnMouseDoubleClick : all
{
	if reference5 == 0 //Left click
	{
		//If an update is available, the user will be notified when they try to open the menu
		if AutoUpdates.GhostReady == 1 || AutoUpdates.ShellReady == 1 || AutoUpdates.BalloonReady == 1 
		{
			"\_q"
			"(Updates are available for:)"
			"\n\n"
			
			if AutoUpdates.GhostReady == 1; "(Hydrate)\n"
			if AutoUpdates.ShellReady == 1; "('%(SHIORI3FW.ShellName)' shell)\n"
			if AutoUpdates.BalloonReady == 1; "('%(SHIORI3FW.BalloonName)' balloon)\n"
			
			"\n"
			"\![*]\q[Download updates now,OnStartUpdate]\n"
			"\![*]\q[Maybe later,OnUpdateLater]\n\n"
			"\![*]\q[Turn off auto updates,OnUpdateOff]"
		}
		else; OnMainMenu
	}
}

OnUpdateLater //If the user decides to update later
{
	AutoUpdates.CheckedToday = 1
	AutoUpdates.GhostReady = 0
	AutoUpdates.ShellReady = 0
	AutoUpdates.BalloonReady = 0
	
	OnMainMenu
}

OnUpdateOff //If the user no longer wants to be notified about updates
{
	Config.AutoUpdates = 0
	AutoUpdates.CheckedToday = 1
	AutoUpdates.GhostReady = 0
	AutoUpdates.ShellReady = 0
	AutoUpdates.BalloonReady = 0
	
	"\0\s[0]\_q(Auto Update checks turned off, you can turn them on again in the Config menu.)\x\![raise,OnMainMenu]"
}

OnMainMenu : all
{
	"\0\![set,autoscroll,disable]\b[2]\_q"
	
	"\![*]\q[I took an extra sip!,OnExtraSip]\n"
	"\![*]\q[Pause drink reminders,OnPause]\n\n"
	"\![*]\q[Change shell,OnShellMenu]"
	
	if ARRAYSIZE(availabledressups) > 0; "\n\![*]\q[Change dressups,OnDressupMenu]"

	"\n\n"
	"\![*]\q[Stats,OnWaterStats]\n"
	"\![*]\q[Config,OnConfigMenu]\n\n"
	"\![*]\q[Done,OnBlank]"
	
	"\n\n[half]"
	_s = ""; if todayswaters != 1; _s = "s"
	"%(todayswaters) drink%(_s) taken this session!"
	
	if currentdrinkstreak >= 3; "\n%(currentdrinkstreak) drinks in a row!"
	
	"\n\f[height,-2]"
	if aitalkinterval > 0
	{
		if GETSECCOUNT - SHIORI3FW.LastAITalkTime >= aitalkinterval; "Next reminder imminent"
		else
		{
			"Next reminder in %(ReminderTimeDisplay)"
		}
	}
	else; "Reminders are off"
	"\n"
	"Runtime: %(RuntimeDisplay)\n"
	"Version %(ghostver)"
}

OnExtraSip
{
	extrasipstoday++
	extrasipstotal++
	
	OnSendStats
	--
	"\0(That's awesome,\w4 good job!)"
	"\0(Good going,\w4 well done!)"
	"\0(Noted,\w4 keep up the good work!)"
	"\0(Great!\w4 1 extra sip added to your total!)"
}

OnPause : all
{
	_time = TOINT(reference0)
	_seconds = _time % 60
	_minutes = _time / 60
	_hours = _minutes / 60
	_minutes %= 60
	
	"\C\![lock,balloonrepaint]\c\0\_q\*\t\b[2]\![set,autoscroll,disable]"
	
	"\f[height,+2]\f[bold,1](Drink reminders are paused!)\f[bold,0]\f[height,default]\n\n"
	
	"(Until you close this menu, you will not be given drink reminders, and your streak will not be broken.)\n\n"
	
	"\![*]\q[Resume reminders,OnResume]\n\n"
	
	"\f[bold,1]Paused for: "
	if _hours < 10; "0"
	"%(_hours):"
	if _minutes < 10; "0"
	"%(_minutes):"
	if _seconds < 10; "0"
	"%(_seconds)"
	
	"\![unlock,balloonrepaint]\![timerraise,1000,1,OnPause,%(_time + 1)]"
}

OnResume
{
	"\0\![timerraise,0,0,OnPause](Hydration resumed!)"
}

OnShellMenu : all
{
	_display = ""
	foreach ShellList; _shell
	{
		if _shell == SHIORI3FW.ShellName; _display += "\![*]"
		_display += "\q[%(_shell),OnSwitchShell,%(_shell)]\n"
	}
	
	"\0\*\_q\![set,autoscroll,disable]"
	
	"\f[align,center]%(emdash) Shells %(emdash)\n\f[align,left]"
	
	if ARRAYSIZE(ShellList) > 16; "\b[4]\n\![*]\q[Back,OnMainMenu]\n"
	elseif ARRAYSIZE(ShellList) > 11; "\b[4]"
	else; "\b[2]"
	
	"\![*]\q[Random shell,OnRandomShell]\n"
	"\![*]\q[Download more shells,OnShellUrl]"
	"\n\n"
	"%(_display)"
	"\n"
	"\![*]\q[Back,OnMainMenu]\n"
	"\![*]\q[Done,OnBlank]"
}

OnRandomShell
{
	"\![change,shell,random,--option=raise-event]"
}

OnShellUrl
{
	"\C\j[https://ukagaka.zichqec.com/ghost/hydrate]"
}

OnSwitchShell
{
	"\![change,shell,""%(reference0)"",--option=raise-event]"
}

OnDressupMenu
{
	_display = "" //Initializing variables
	_currentcategories = IARRAY
	_items = 0
	
	foreach availabledressups; _dressup //For every dressup that the ghost has
	{
		_category = _dressup[0,C_BYTE1] //Gather the name and category of the current dressup
		_name = _dressup[1,C_BYTE1]
		
		if reference0 == "" && ASEARCH(_category,_currentcategories) == -1 //If the user is not in a submenu AND we haven't logged this category yet
		{
			_currentcategories ,= _category //Add the category to a list
			_display += "\__q[OnDressupMenu,%(_category)]%(_category)\__q\n" //Make a menu option for it
		}
		elseif _category == reference0 //Otherwise, if the user IS in a submenu, AND this item matches the current submenu category
		{
			_items++
			_pos = ASEARCH("%(_category)%(C_BYTE1)%(_name)",currentdressups) //See if the name of this item is in the name of dressups currently being used
			if _pos != -1; _display += "\![*]"
			_display += "\__q[OnChangeDesign,%(_category),%(_name)]%(_name)\__q\n"
		}
	}
	--
	"\C\![lock,balloonrepaint]\c\0\*\_q\![set,autoscroll,disable]"
	--
	if reference0 == ""
	{
		"\f[align,center]%(emdash) Designs %(emdash)\n\f[align,left]"
	}
	else
	{
		"\f[align,center]%(emdash) %(reference0) %(emdash)\n\f[align,left]"
	}
	--
	if reference0 == ""
	{
		if ARRAYSIZE(_currentcategories) > 18; "\b[4]\n[half]\![*]\q[Back,OnMainMenu]\n"
		elseif ARRAYSIZE(_currentcategories) > 11; "\b[4]"
		else; "\b[2]"
		--
		"\![*]\q[Randomize all categories,OnRandomDressup,,menu]"
	}
	elseif reference0 != ""
	{
		if _items > 18; "\b[4]\n\n[half]\![*]\q[Back,OnDressupMenu]\n"
		elseif _items > 11; "\b[4]"
		else; "\b[2]"
		--
		"\![*]\q[Random,OnRandomDressup,%(reference0),menu]"
	}
	--
	"\n\n[half]%(_display)\n[half]"
	--
	if reference0 == ""
	{
		"\![*]\q[Back,OnMainMenu]\n\![*]\q[Done,OnBlank]"
	}
	else
	{
		"\![*]\q[Back,OnDressupMenu]\n\![*]\q[Done,OnBlank]"
	}
	--
	"\![unlock,balloonrepaint]"
}

OnChangeDesign
{
	"\C\![set,autoscroll,disable]\0\_q\![bind,%(reference0),%(reference1)]\![set,balloonwait,0.01] \![raise,OnDressupMenu,%(reference0)]" //TODO here, like the one below...
}

//TODO i'm not sure if the newer version of this function offers me any benefits or not... hm. The new one does have the thing where if it doesn't add anything to a category that is mustselect or multiple, it force picks at least one. Maybe do that
OnRandomDressup
{
	AutoDressup.LastChangeTime = GETSECCOUNT
	
	_command = ""
	foreach currentdressups; _dressup //Remove all current dressups
	{
		if reference0 != "" && _dressup[0,C_BYTE1] != reference0; continue //Skip unless this is for the category we want to randomize
		
		_category = _dressup[0,C_BYTE1]
		_name = _dressup[1,C_BYTE1]
		_command += "\![bind,%(_category),%(_name),0]"
	}
	
	if reference1 == "menu"; "\C\![lock,balloonrepaint]\![set,autoscroll,disable]"
	--
	"\0%(_command)\![done    removing]"
	--
	_availabledressups = ASORT("string,ascending",availabledressups)
	
	LOGGING("_availabledressups: %(_availabledressups)")
	
	foreach dressupcategories; _category
	{
		if reference0 != "" && _category != reference0; continue //Skip unless this is for the category we want to randomize
		_dressups = IARRAY
		_options = ""
		
		_i = 0
		foreach _availabledressups; _dressup
		{
			if _dressup[0,C_BYTE1] == _category
			{
				if _options == ""; _options = _dressup[2,C_BYTE1]
				_dressups ,= _dressup[1,C_BYTE1]
				
				_availabledressups[_i] = IARRAY
			}
			else
			{
				_i++
			}
		}
		_mustselect = 0; _multiple = 0
		if "mustselect" _in_ _options; _mustselect = 1
		if "multiple" _in_ _options; _multiple = 1
		
		_skipchance = 4 //1/4 chance
		if !_mustselect && RAND(_skipchance) == 0; continue
		
		if !_multiple
		{
			_command += "\![bind,%(_category),%(ANY(_dressups)),1]"
		}
		else
		{
			while ARRAYSIZE(_dressups) >= 1
			{
				_dressup = ANY(_dressups)
				_dressups[LSO] = IARRAY
				if RAND(_skipchance) == 0; continue
				
				_command += "\![bind,%(_category),%(_dressup),1]"
			}
		}
	}
	_command
	--
	if reference1 == "menu"; "\![set,balloonwait,0.01] \![raise,OnDressupMenu,%(reference0)]" //TODO that is definitely not necessary... I think
}

OnWaterStats : all
{
	_h = "\f[color,default.anchor]"
	_d = "\f[color,default]"
	if SHIORI3FW.BalloonName == "H2O"
	{
		_h = "\f[bold,1]"
		_d = "\f[bold,default]"
	}
	
	"\0\*\b[4]\_q"
	
	"\f[align,center]%(emdash) Stats %(emdash)\n\n\f[align,default]"
	
	_s = ""; if todayswaters != 1; _s = "s"
	"\![*]%(_h)%(todayswaters)%(_d) drink%(_s) taken this session\n"
	
	_s = ""; if totalwaters != 1; _s = "s"
	"\![*]%(_h)%(totalwaters)%(_d) drink%(_s) taken in total\n"
	"\n"
	_s = ""; if currentdrinkstreak != 1; _s = "s"
	"\![*]Currently on a streak of %(_h)%(currentdrinkstreak)%(_d) drink%(_s)!\n"
	
	_s = ""; if highestdrinkstreak != 1; _s = "s"
	"\![*]Your highest drink streak is %(_h)%(highestdrinkstreak)%(_d) drink%(_s)!\n"
	"\n"
	_s = ""; if extrasipstoday != 1; _s = "s"
	"\![*]%(_h)%(extrasipstoday)%(_d) extra sip%(_s) taken today\n"
	
	_s = ""; if extrasipstotal != 1; _s = "s"
	"\![*]%(_h)%(extrasipstotal)%(_d) extra sip%(_s) taken in total\n\n"
	
	nonoverlap : {
	"(You're doing awesome, keep it up!)"
	"(Good job, keep going!)"
	"(You've got this!)"
	"(Heck yeah!)"
	"(Look at you go!)"
	}
	
	"\n\n\![*]\q[Back,OnMainMenu]\n\![*]\q[Done,OnBlank]"
}


//----------Config Menu----------
OnConfigMenu : all
{
	_b = ""; _d = ""
	if SHIORI3FW.BalloonName == "H2O"
	{
		_b = "\f[bold,1]"
		_d = "\f[bold,default]"
	}
	"\C\![lock,balloonrepaint]\c\![close,inputbox,OnDrinkTime]\_q\b[4]\f[anchorvisitedfontcolor,default.anchor]\![set,autoscroll,disable]"
	
	"\f[align,center]%(emdash) Config %(emdash)\n\f[align,default]"
	
	"\![*]Reminder rate:%(br)%(_b)\_a[OnChangeTalk]%(TalkRateLabel(aitalkinterval))\_a%(_d)\n"
	"\![*]Sound: %(_b)\_a[OnChangeNotif]%(Config.NotificationSound)\_a%(_d)\n"
	"\![*]Reminders while minimized: %(_b)\_a[OnToggleRemindWhenMinimized]%(('Off','On')[Config.RemindWhenMinimized])\_a%(_d)\n"
	"\n"
	
	"\![*]Match position when changing shells: %(_b)\_a[OnToggleMatchShellPosition]%(('Off','On')[Config.MatchShellPosition])\_a%(_d)\n"
	
	_s = "s"; if Config.AutoShellHours == 1; _s = ""
	_shellchange = REPLACE(Config.AutoShellChange,"interval","%(Config.AutoShellHours) hour%(_s)")
	"\![*]Auto shell change:%(br)%(_b)\_a[OnConfig.AutoShell]%(_shellchange)\_a%(_d)\n"
	
	_s = "s"; if Config.AutoDressupHours == 1; _s = ""
	_dressupchange = REPLACE(Config.AutoDressupChange,"interval","%(Config.AutoDressupHours) hour%(_s)")
	"\![*]Auto dressup change:%(br)%(_b)\_a[OnConfig.AutoDressup]%(_dressupchange)\_a%(_d)\n"
	"\n"
	
	"Auto update checks: \![*]%(_b)\_a[OnToggleAutoUpdates]%(('Off','On')[Config.AutoUpdates])\_a%(_d)\n"
	"Update...\n"
	"\![*]\q[Ghost,OnUpdateCheck,ghost]  \![*]\q[Shell,OnUpdateCheck,shell]  \![*]\q[Balloon,OnUpdateCheck,balloon]\n"
	"\n"
	
	"\![*]\q[See the changelog,OnChangeLog,FromMenu]\n\n"
	
	"\![*]Hour notifications: %(_b)\_a[OnToggleHourNotifs]%(('Off','On')[Config.HourNotifs])\_a%(_d)\n"
	"\![*]Offscreen notifs: %(_b)\_a[OnToggleOffscreenTalk]%(('Off','On')[Config.OffscreenDialogue])\_a%(_d)\n"
	"\![*]Enable uninstall: %(_b)\_a[OnToggleUninstall]%(('Off','On')[Config.EnableUninstall])\_a%(_d)\n"
	
	"\n"
	"\![*]\q[Back,OnMainMenu]\n"
	"\![*]\q[Done,OnBlank]"
	"\![unlock,balloonrepaint]"
}

OnChangeTalk : all
{
	"\0\_q\s[0]\![open,inputbox,OnDrinkTime,-1]\![set,balloontimeout,-1]"
	
	"(How many minutes would you like between reminders? "
	switch aitalkinterval == 0
	{
		"Currently set to %(TalkRateLabel(aitalkinterval)).)"
		"Reminders are currently off.)"
	}
	"\n\n"
	"\![*]\q[Cancel,OnConfigMenu]"
}

OnDrinkTime
{
	"\C\![lock,balloonrepaint]\c"
	--
	if reference0 >= 0 && GETTYPE(reference0) == 1
	{
		aitalkinterval = (reference0 * 60)
		
		"\![unlock,balloonrepaint]"
		--
		if reference0 == 0
		{
			"\0\s[0](Reminders turned off.)"
		}
		else
		{
			"\0\s[0](You will be reminded every %(TalkRateLabel(aitalkinterval)).)"
		}
	}
	else
	{
		"\0\s[0]\_q\![open,inputbox,OnDrinkTime,-1]\![set,balloontimeout,-1]"
		--
		"(Invalid input. Please enter a positive integer, or 0 to turn reminders off.)"
		--
		"\n\n"
		--
		"\![*]\q[Cancel,OnConfigMenu]\![unlock,balloonrepaint]"
	}
}

OnChangeNotif : all
{
	_opts = ("Water Drop","Bubbles","Splash","Campana","Stop","Success")
	
	_g = "\f[color,disable]"
	_d = "\f[color,default]"
	
	_b = ""; _bd = ""
	if SHIORI3FW.BalloonName == "H2O"
	{
		_b = "\f[bold,1]"
		_bd = "\f[bold,default]"
	}
	
	_vol_up = "\q[▲,OnQuickVolume,Up]"
	if Config.NotificationVolume >= 100; _vol_up = "%(_g)▲%(_d)"
	_vol_down = "\q[▼,OnQuickVolume,Down]"
	if Config.NotificationVolume <= 0; _vol_down = "%(_g)▼%(_d)"
	
	"\C\![lock,balloonrepaint]\c\0\b[2]\_q\![set,autoscroll,disable]\*"
	"\![close,dialog,OnPickCustomNotif]"
	"\f[align,center]%(emdash) Reminder sound %(emdash)\n\n[half]\f[align,left]"
	
	"Volume: %(_vol_up)%(_vol_down) %(Config.NotificationVolume)\n\n[half]"
	
	if Config.NotificationSound == "None"; "\![*]"
	"\__q[OnNotifSet,None]None\__q\n"
	
	if Config.NotificationSound == "Custom"; "\![*]"
	"\__q[OnNotifSet,Custom]Custom\__q  \__q[OnCustomNotif](Pick sound)\__q\n"
	
	if Config.NotificationSound == "Random"; "\![*]"
	"\__q[OnNotifSet,Random]Random each time\__q\n"
	"\__q[OnToggleIncludeCustom](Custom %(_b)%(('excluded','included')[Config.IncludeCustomSound])%(_bd))\__q\n\n[half]"
	
	foreach _opts; _opt
	{
		if Config.NotificationSound == _opt; "\![*]"
		"\__q[OnNotifSet,%(_opt)]%(_opt)\__q\n"
	}
	
	"\n[half]\![*]\q[Back,OnConfigMenu]\![unlock,balloonrepaint]"
}

//Up/Down volume buttons
OnQuickVolume
{
	_new = Config.NotificationVolume
	
	if reference0 == "Up"; _new += 5
	else; _new -= 5
	
	if _new > 100; _new = 100
	if _new < 0; _new = 0
	
	Config.NotificationVolume = _new
	
	OnChangeNotif
}

OnNotifSet
{
	Config.NotificationSound = reference0
	"\C\![sound,stop]%(notification_sound)\![raise,OnChangeNotif]"
}

OnCustomNotif : all
{
	_h = "\f[color,default.anchor]"
	_d = "\f[color,default]"
	
	"\0\_q\b[2]\![set,autoscroll,disable]\![open,dialog,open,--id=OnPickCustomNotif]\*"
	
	"(Choose a sound file. Supported types are %(_h).mp3%(_d), %(_h).wav%(_d), %(_h).wma%(_d), and %(_h).mid%(_d).)\n\n"
	
	"(If sound files give an error, or you would like access to more file types including %(_h).flac%(_d), %(_h).ogg%(_d), or %(_h).m4a%(_d), please consider installing \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAV Filters\_a.)\n\n"
	
	"\![*]\q[Cancel,OnChangeNotif]"
}

OnPickCustomNotif
{
	Config.NotificationSound = "Custom"
	Config.NotificationCustomPath = reference2
	"\C\![sound,stop]%(notification_sound)\![raise,OnChangeNotif]"
}

OnSystemDialogCancel
{
	if reference1 == "OnPickCustomNotif"; "\C\![sound,stop]\![raise,OnChangeNotif]"
}

OnToggleIncludeCustom
{
	if Config.IncludeCustomSound != 1; Config.IncludeCustomSound = 1
	else; Config.IncludeCustomSound = 0
	OnChangeNotif
}

OnUpdateCheck
{
	if reference0 == "ghost"; "\![updatebymyself]"
	elseif reference0 == "balloon"; "\![update,balloon]"
	else; "\![update,shell]"
}

OnToggleAutoUpdates
{
	if Config.AutoUpdates != 1; Config.AutoUpdates = 1
	else; Config.AutoUpdates = 0
	
	OnConfigMenu
}

OnToggleMatchShellPosition
{
	if Config.MatchShellPosition != 1; Config.MatchShellPosition = 1
	else; Config.MatchShellPosition = 0
	OnConfigMenu
}

OnConfig.AutoShell : all
{
	"\C\![lock,balloonrepaint]\c"
	"\0\b[2]\_q\![set,autoscroll,disable]\*"
	"\![close,inputbox,OnConfig.AutoShell.HourSet]"
	"\f[align,center]%(emdash) Auto shell change %(emdash)\n\n\f[align,left]"
	
	"\![*]\__q[OnConfig.AutoShell.Set,Off]Off\__q\n"
	"\![*]\__q[OnConfig.AutoShell.Set,On boot]On boot\__q\n"
	"\![*]\__q[OnConfig.AutoShell.Set,After a drink]After a drink\__q\n"
	_s = "s"; if Config.AutoShellHours == 1; _s = ""
	"\![*]\__q[OnConfig.AutoShell.Set,Every interval]Every %(Config.AutoShellHours) hour%(_s)\__q\n"
	"\__q[OnConfig.AutoShell.HourChange](Change rate)\__q\n"
	"\n"
	"\![*]\q[Back,OnConfigMenu]"
	"\![unlock,balloonrepaint]"
}

OnConfig.AutoShell.Set
{
	Config.AutoShellChange = reference0
	AutoShell.LastChangeTime = GETSECCOUNT
	OnConfigMenu
}

OnConfig.AutoShell.HourChange : all
{
	"\0\_q\s[0]\![open,inputbox,OnConfig.AutoShell.HourSet,-1]\![set,balloontimeout,-1]"
	
	_s = "s"; if Config.AutoShellHours == 1; _s = ""
	"(How many hours would you like between shell changes? Currently set to %(Config.AutoShellHours) hour%(_s).)\n\n"
	"(Note that the timer is reset each session.)"
	"\n\n"
	"\![*]\q[Cancel,OnConfig.AutoShell]"
}

OnConfig.AutoShell.HourSet : all
{
	if TOINT(reference0) > 0
	{
		Config.AutoShellHours = TOINT(reference0)
		AutoShell.LastChangeTime = GETSECCOUNT
		OnConfig.AutoShell
	}
	else
	{
		"\0\s[0]\_q"
		"(Invalid time. Please input an integer greater than 0.)"
		"\x\![raise,OnConfig.AutoShell.HourChange]"
	}
}

OnConfig.AutoDressup : all
{
	"\C\![lock,balloonrepaint]\c"
	"\0\b[2]\_q\![set,autoscroll,disable]\*"
	"\![close,inputbox,OnConfig.AutoDressup.HourSet]"
	"\f[align,center]%(emdash) Auto dressup change %(emdash)\n\n\f[align,left]"
	
	"\![*]\__q[OnConfig.AutoDressup.Set,Off]Off\__q\n"
	"\![*]\__q[OnConfig.AutoDressup.Set,On boot]On boot\__q\n"
	"\![*]\__q[OnConfig.AutoDressup.Set,After a drink]After a drink\__q\n"
	_s = "s"; if Config.AutoDressupHours == 1; _s = ""
	"\![*]\__q[OnConfig.AutoDressup.Set,Every interval]Every %(Config.AutoDressupHours) hour%(_s)\__q\n"
	"\__q[OnConfig.AutoDressup.HourChange](Change rate)\__q\n"
	"\![*]\__q[OnConfig.AutoDressup.Set,When shell changes]When shell changes\__q\n"
	"\n"
	"\![*]\q[Back,OnConfigMenu]"
	"\![unlock,balloonrepaint]"
}

OnConfig.AutoDressup.Set
{
	Config.AutoDressupChange = reference0
	AutoDressup.LastChangeTime = GETSECCOUNT
	OnConfigMenu
}

OnConfig.AutoDressup.HourChange : all
{
	"\0\_q\s[0]\b[2]\![open,inputbox,OnConfig.AutoDressup.HourSet,-1]\![set,balloontimeout,-1]"
	
	_s = "s"; if Config.AutoDressupHours == 1; _s = ""
	"(How many hours would you like between dressup changes? Currently set to %(Config.AutoDressupHours) hour%(_s).)\n\n"
	"(Note that the timer is reset each session and any time the shell changes.)"
	"\n\n"
	"\![*]\q[Cancel,OnConfig.AutoDressup]"
}

OnConfig.AutoDressup.HourSet : all
{
	if TOINT(reference0) > 0
	{
		Config.AutoDressupHours = TOINT(reference0)
		AutoDressup.LastChangeTime = GETSECCOUNT
		OnConfig.AutoDressup
	}
	else
	{
		"\0\s[0]\_q"
		"(Invalid time. Please input an integer greater than 0.)"
		"\x\![raise,OnConfig.AutoDressup.HourChange]"
	}
}

OnToggleRemindWhenMinimized
{
	if Config.RemindWhenMinimized != 1; Config.RemindWhenMinimized = 1
	else; Config.RemindWhenMinimized = 0
	OnConfigMenu
}

OnToggleHourNotifs
{
	if Config.HourNotifs != 1; Config.HourNotifs = 1
	else; Config.HourNotifs = 0
	OnConfigMenu
}

OnToggleOffscreenTalk
{
	if Config.OffscreenDialogue != 1; Config.OffscreenDialogue = 1
	else; Config.OffscreenDialogue = 0
	OnConfigMenu
}

OnToggleUninstall
{
	if Config.EnableUninstall != 1; Config.EnableUninstall = 1
	else; Config.EnableUninstall = 0
	OnConfigMenu
}