//----Drag and Drop----

OnInstallBegin
{
	"\0\s[0](Installing...)"
}

OnInstallComplete //Installing something ghost related
{
	"\0\s[0](Installed %(reference0): %(reference1))."
	--
	//A little menu to open or change to the ghost that was installed immediately
	if "ghost" _in_ reference0
	{
		"\n\n\_q"
		--
		"\![*]\__q[OnInstallComplete.Action,call]Call %(reference0)\__q  \![*]\__q[OnInstallComplete.Action,change]Change to %(reference0)\__q\n\n"
		--
		"\![*]\q[Done,OnBlank]"
	}
	elseif "shell" _in_ reference0
	{
		"\n\n\_q"
		--
		"\![*]\__q[OnInstallComplete.Action,changeshell]Change to %(reference0)\__q\n\n"
		--
		"\![*]\q[Done,OnBlank]"
	}
}

OnInstallComplete.Action
{
	if reference0 == "changeshell"; "\![change,shell,lastinstalled,--option=raise-event]"
	elseif reference0 == "change"; "\![change,ghost,lastinstalled]"
	else; "\![call,ghost,lastinstalled]"
}

OnInstallFailure //If the install fails
{
	"\0\s[0](The install failed.\w8\w8\n\n"
	--
	if reference0 == "unsupported"
	{
		"The file isn't supported."
	}
	elseif reference0 == "extraction"
	{
		"It couldn't be extracted."
	}
	--
	")"
}

OnInstallRefuse
{
	"\0\s[0](Cannot install, this is meant for %(reference0).)"
}

//Creating an updates2.dau
OnUpdatedataCreating
{
	"\0\s[0](Creating an updates2.dau file.)"
}

//Finished creating
OnUpdatedataCreated
{
	"\0\s[0](Finished making the updates2.dau.)"
}

//Creating a .nar
OnNarCreating
{
	"\0\s[0](Creating a .nar file.)"
}

OnNarCreated
{
	//Makes a clickable link that'll open the location of the file they just made
	_nar = "\_a[OnNarLocation,""%(reference1)""]%(reference0)\_a"
	
	"\0\s[0](Successfully created %(_nar).)"
}

OnNarLocation
{
	"\![open,explorer,""%(reference0)""]"
}

//----Uninstalling----

//Bringing up the uninstall option
OnVanishSelecting
{
	"\0\s[0](Do you want to uninstall?)"
}

//Deciding to uninstall
OnVanishSelected 
{
	"\0\s[0](Take care of yourself, user!)\w8\w8"
}

//When another ghost has been uninstalled and it switches to this ghost
OnVanished
{
	"\0\s[0](%(reference0) wasn't hydrated enough.)"
}

//----Network update---

//When the ghost finishes checking for updates - this currently only occurs in Hydrate when it's an auto check
OnUpdateCheckResult
{
	AutoUpdates.CheckedToday = 1 //Sets it so it won't check again until at least midnight
	AutoUpdates.GhostReady = 0
	AutoUpdates.ShellReady = 0
	AutoUpdates.BalloonReady = 0
	
	_types = IARRAY
	foreach reference; _ref
	{
		_ref = SPLIT(_ref,C_BYTE1)
		if _ref[1] == "OK" && _ref[2] > 0; _types ,= _ref[0]
	}
	
	if ASEARCH("ghost",_types) != -1; AutoUpdates.GhostReady = 1
	if ASEARCH("shell",_types) != -1; AutoUpdates.ShellReady = 1
	if ASEARCH("balloon",_types) != -1; AutoUpdates.BalloonReady = 1
}

OnStartUpdate
{
	if reference0 == "ghost"
	{
		"\![updatebymyself]"
	}
	else
	{
		_cmd = ""
		if AutoUpdates.GhostReady == 1; _cmd += "ghost+"
		if AutoUpdates.ShellReady == 1; _cmd += "shell+"
		if AutoUpdates.BalloonReady == 1; _cmd += "balloon"
		_cmd = ERASE(_cmd,(STRLEN(_cmd) - 1),1)
		"\![update,%(_cmd)]"
	}
}

OnUpdateBegin //Starting to actually update
{
	"\0\s[0](Beginning update.)\w8\w8"
}

OnUpdateReady
{
	reference0++ //Number of files starts from 0, so this displays the correct amount
	
	//plural checks, adds an s and changes is to are if there's more than 1 file
	_s = ""; _are = "is"
	if reference0 != 1; {_s = "s"; _are = "are"}
	
	"\0\s[0](There %(_are) %(reference0) new file%(_s).)\w8"
}

OnUpdateComplete
{
	OnUpdateVars
	
	if reference0 == "none"
	{
		"\0\s[0](There are no new files.)"
	}
	else
	{
		AutoUpdates.CheckedToday = 0
		"\0\s[0](Update complete.)"
		--
		"\n\n\![*]\q[Show changelog,OnChangeLog]\n\![*]\q[Ok,NoChangelog]"
	}
}

ghostver
{
	"2.0.2"
}

OnChangeLog : all
{
	"\j[https://ukagaka.zichqec.com/ghost/hydrate#version_history]"
}

OnUpdateFailure //If the update fails
{
	if reference0 == "timeout" //If it timed out
	{
		"\0\s[0](The connection timed out.)"
	}
	elseif reference0 == "md5 miss" //If the update files have not been uploaded correctly and don't match the updates2.dau
	{
		"(The MD5 values don't match.\w8\w8 Please let \_a[https://ukagaka.zichqec.com/]Zichqec\_a know!)"
	}
	elseif reference0 == "artificial"
	{
		"\0\s[0](Canceled update.)"
	}
	else
	{
		"\0\s[0](Error: '%(reference0)'.)"
	}
}

OnUpdateOtherBegin
{
	if reference3 == "balloon"
	{
		"(Checking for updates to the current balloon, %(SHIORI3FW.BalloonName).)"
	}
	elseif reference3 == "shell"
	{
		"(Checking for updates to the current shell, %(SHIORI3FW.ShellName).)"
	}
	else
	{
		"(Beginning %(reference3) update.)"
	}
	--
	"\w8"
}

OnUpdateOtherReady
{
	reference0++
	
	//plural checks, adds an s and changes is to are if there's more than 1 file
	_s = ""; _are = "is"
	if reference0 != 1; {_s = "s"; _are = "are"}
	
	"\0\s[0](There %(_are) %(reference0) new file%(_s).)\w8"
}

OnUpdateOtherComplete
{
	if reference0 == "none"
	{
		"\0\s[0](No new files for the current %(reference3) to update with.)"
	}
	else
	{
		AutoUpdates.CheckedToday = 0
		"\0\s[0](Update complete!)"
	}
	
}

OnUpdateOtherFailure
{
	"\0(%(reference3) update failed: '%(reference0)'.)"
}

OnShellScaling
{
	Scale.X = reference0
	Scale.Y = reference2
	
	OnSendStats
	--
	"\0\s[0](%(reference0)% hydration.)"
}

OnSurfaceRestore
{
	"\0\s[0]"
}