//Hydrate stat share event
//Called when Hydrate boots or closes, when another ghost boots, every hour, when the shell changes, when the dressups change, when the scaling changes, when a drink is taken (timed drink or extra sip), when a timed drink is missed (breaks the current streak), or when it's minimized/unminimized
//It is sent as NOTIFY to all ghosts. Please save any data you wish to use on your ghost's side, and use it at your leisure.

/*
	reference0: Name of the current shell
	reference1: List of current dressups. This is a two dimensional array. Each dressup is delimited by 0xFDEF, and within each dressup the category name and part name are delimited by the unicode noncharacter 0x01.
	reference2: The current shell scaling (horizontal)
	reference3: The current shell scaling (vertical)
	reference4: Number of drinks today
	reference5: Number of drinks total
	reference6: Current drink streak (number of drinks in a row) (can span multiple sessions)
	reference7: Highest drink streak (number of drinks in a row high score, only kicks in at 3 drinks or more)
	reference8: Number of extra sips today
	reference9: Number of extra sips total
	reference10: 1 if Hydrate is minimized, 0 otherwise (Note that the drink count will not go up while minimized, nor will the streak reset)
*/

/*

NOTE ABOUT 0xFDEF AND 0x01:

For YAYA users:
These can be easily handled with the function CHR! CHR(0xFDEF) gets you 0xFDEF and CHR(1) gets you 0x01. There is also a handy shortcut for 0x01, which is C_BYTE1.

For other SHIORI:
I'm not sure how they will handle this! If for some reason your chosen SHIORI cannot handle 0xFDEF, please let me know and I will consider adding an event for compatibility.

*/

//This intermediary step is because otherwise the boot events pass along their own references...
OnSendStats
{
	if reference0 == "dressupmenu"; "\C"
	--
	"\![embed,OnHydrateGhost.GetStats]"
}

OnHydrateGhost.GetStats : all
{
	//0xFDEF used to delimit the big chunks, C_BYTE1 used to delimit the category and part name. This way around because otherwise it's a damn pain to process on the receiving end later!? Also, surely all SHIORI must support C_BYTE1, or else they can't process all events... so, that's the safer bet to be at the more granular level, maybe??? hm
	//Note for future Zi: 0xFDEF is what's called a "noncharacter" in the unicode standard. They're neat! They go from 0xFDD0 to 0xFDEF
	
	_dressups = ""
	foreach currentdressups; _dressup
	{
		if _dressups != ""; _dressups += CHR(0xFDEF)
		_dressups += _dressup
	}
	"\![notifyother,__SYSTEM_ALL_GHOST__,OnHydrateGhost.GetStats,""%(nowshell)"",""%(_dressups)"",%(Scale.X),%(Scale.Y),%(todayswaters),%(totalwaters),%(currentdrinkstreak),%(highestdrinkstreak),%(extrasipstoday),%(extrasipstotal),%(IsMinimized)]"
}

HydrateCommuResponse : nonoverlap_pool
{
	_ghost = _argv[0]
	
	"\0(Stay hydrated,\w4 %(reference0)!)"
	"\0(Make sure to stay hydrated,\w4 %(reference0)!)"
	"\0(Make sure you get a drink of water if you're thirsty,\w4 %(reference0)!)"
}