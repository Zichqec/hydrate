OnMouseDoubleClick : all
{
	if reference5 == 0 //Left click
	{
		if AutoUpdates[3] == 1 || AutoUpdates[4] == 1 || AutoUpdates[5] == 1  //If an update is available, the user will be notified when they try to open the menu
		{
			"(Updates are available for:)\n\n"
			
			if AutoUpdates[3] == 1; "(Hydrate)\n"
			if AutoUpdates[4] == 1; "('%(nowshell)' shell)\n"
			if AutoUpdates[5] == 1; "('%(SHIORI3FW.BalloonName)' balloon)\n"
			
			"\_q\n"
			"\![*]\q[Download updates now,OnStartUpdate]\n"
			"\![*]\q[Maybe later,UpdateLater]\n\n"
			"\![*]\q[Turn off auto updates,UpdateOff]"
		}
		else; OnMenuRun
	}
}

Select.UpdateLater //If the user decides to update later
{
	AutoUpdates[1] = 1
	AutoUpdates[3] = 0
	AutoUpdates[4] = 0
	AutoUpdates[5] = 0
	
	"\0\s[0](Alright, you will be reminded once a day.)"
}

Select.UpdateOff //If the user no longer wants to be notified about updates
{
	AutoUpdates[0] = "OFF"
	AutoUpdates[1] = 1
	AutoUpdates[3] = 0
	AutoUpdates[4] = 0
	AutoUpdates[5] = 0
	
	"\0\s[0](Auto Update checks turned off, you can turn them on again in the Config menu.)"
}

OnMenuRun : all
{
	"\0\![set,autoscroll,disable]\b2\_q"
	"\![*]\q[I took an extra sip!,OnExtraSip]\n"
	"\![*]\q[Pause drink reminders,OnPause]\n\n[half]"
	"\![*]\q[Change Shell,OnShellMenu]"
	
	if ARRAYSIZE(availabledressups) > 0; "\n\![*]\q[Change Design,OnDressupMenu]"

	"\n\n[half]"
	"\![*]\q[Stats,OnWaterStats]\n"
	"\![*]\q[Config,OnConfigMenu]\n\n"
	"\![*]\q[Done,OnBlank]"
	
	_s = ""; if todayswaters != 1; _s = "s"
	"\n\n\n\n[half]%(todayswaters) drink%(_s) taken this session!"
	
	if currentdrinkstreak > 3; "\n%(currentdrinkstreak) drinks in a row!"
	
	"\n\f[height,-2]Runtime: %(passhour):%(displaymin)\nVersion %(ghostver)"
}

OnExtraSip
{
	extrasipstoday++
	extrasipstotal++
	
	"\0(That's awesome,\w4 good job!)"
	"\0(Good going,\w4 well done!)"
	"\0(Noted,\w4 keep up the good work!)"
	"\0(Great!\w4 1 extra sip added to your total!)"
}

OnPause : all
{
	_hours = TOINT(reference2); if _hours == ""; _hours = 0
	_minutes = TOINT(reference1); if _minutes == ""; _minutes = 0
	_seconds = TOINT(reference0); if _seconds == ""; _seconds = 0
	if _seconds >= 60
	{
		_seconds = 0
		_minutes++
	}
	if _minutes >= 60
	{
		_minutes = 0
		_hours++
	}
	
	"\C\![lock,balloonrepaint]\c\0\_q\*\t\b2\![set,autoscroll,disable]"
	
	"\f[height,+2]\f[bold,1](Drink reminders are paused!)\f[bold,0]\f[height,default]\n\n"
	
	"(Until you close this menu, you will not be given drink reminders, and your streak will not be broken.)\n\n"
	
	"\![*]\q[Resume reminders,OnResume]\n\n"
	
	"\f[bold,1]Paused for: "
	if _hours < 10; "0"
	"%(_hours):"
	if _minutes < 10; "0"
	"%(_minutes):"
	if _seconds < 10; "0"
	"%(_seconds)"
	
	// for _i = 0; _i < 60; _i++
	// {
		// if _i < 10; "0"
		// "%(_i)\_w[1000]"
		// if _i < 59; "\c[char,2]"
	// }
	
	"\![unlock,balloonrepaint]\![timerraise,1000,1,OnPause,%(_seconds + 1),%(_minutes),%(_hours)]"
}

OnResume
{
	"\0\![timerraise,0,0,OnPause](Hydration resumed!)"
}

On_installedshellname
{
	ShellList = reference
}

OnShellMenu : all
{
	_display = ""
	for _i = 0; _i < ARRAYSIZE(ShellList); _i++
	{
		if ShellList[_i] == nowshell; _display += "\![*]"
		_display += "\q[%(ShellList[_i]),OnSwitchShell,%(ShellList[_i])]\n"
	}
	
	"\0\*\_q\![set,autoscroll,0]"
	
	"\f[align,center]%(emdash) Shells %(emdash)\n\f[align,left]"
	
	if ARRAYSIZE(ShellList) > 16; "\b[4]\n[half]\![*]\q[Back,OnMenuRun]\n"
	elseif ARRAYSIZE(ShellList) > 11; "\b[4]"
	else; "\b[2]"
	
	"\![*]\q[Random shell,OnRandomShell]\n"
	"\![*]\q[Download more shells,OnShellUrl]"
	"\n\n[half]"
	"%(_display)\n\![*]\q[Back,OnMenuRun]\n\![*]\q[Done,OnBlank]"
}

OnRandomShell
{
	"\![get,property,OnGetCoords,currentghost.scope(0).rect]\![change,shell,random]"
}

OnShellUrl
{
	"\C\j[https://ukagaka.zichqec.com/ghost/hydrate]"
}

OnSwitchShell
{
	"\![get,property,OnGetCoords,currentghost.scope(0).rect]\![change,shell,%(reference0)]"
}

OnDressupMenu
{
	_display = "" //Initializing variables
	_currentcategories = IARRAY
	_items = 0
	
	foreach availabledressups; _dressup //For every dressup that the ghost has
	{
		_category = _dressup[0,C_BYTE1] //Gather the name and category of the current dressup
		_name = _dressup[1,C_BYTE1]
		
		if reference0 == "" && ASEARCH(_category,_currentcategories) == -1 //If the user is not in a submenu AND we haven't logged this category yet
		{
			_currentcategories ,= _category //Add the category to a list
			_display += "\__q[OnDressupMenu,%(_category)]%(_category)\__q\n" //Make a menu option for it
		}
		elseif _category == reference0 //Otherwise, if the user IS in a submenu, AND this item matches the current submenu category
		{
			_items++
			_pos = ASEARCH("%(_category)%(C_BYTE1)%(_name)",currentdressups) //See if the name of this item is in the name of dressups currently being used
			if _pos != -1; _display += "\![*]"
			_display += "\__q[OnChangeDesign,%(_category),%(_name)]%(_name)\__q\n"
		}
	}
	--
	"\C\![lock,balloonrepaint]\c\0\*\_q\![set,autoscroll,0]"
	--
	if reference0 == ""
	{
		"\f[align,center]%(emdash) Designs %(emdash)\n\f[align,left]"
	}
	else
	{
		"\f[align,center]%(emdash) %(reference0) %(emdash)\n\f[align,left]"
	}
	--
	if reference0 == ""
	{
		if ARRAYSIZE(_currentcategories) > 18; "\b[4]\n[half]\![*]\q[Back,OnMenuRun]\n"
		elseif ARRAYSIZE(_currentcategories) > 11; "\b[4]"
		else; "\b2"
		--
		"\![*]\q[Randomize all categories,OnRandomDressup]"
	}
	elseif reference0 != ""
	{
		if _items > 18; "\b[4]\n\n[half]\![*]\q[Back,OnDressupMenu]\n"
		elseif _items > 11; "\b[4]"
		else; "\b2"
		--
		"\![*]\q[Random,OnRandomDressup,%(reference0)]"
	}
	--
	"\n\n[half]%(_display)\n[half]"
	--
	if reference0 == ""
	{
		"\![*]\q[Back,OnMenuRun]\n\![*]\q[Done,OnBlank]"
	}
	else
	{
		"\![*]\q[Back,OnDressupMenu]\n\![*]\q[Done,OnBlank]"
	}
	--
	"\![unlock,balloonrepaint]"
}

OnChangeDesign
{
	"\C\![set,autoscroll,disable]\0\_q\![bind,%(reference0),%(reference1)]\![set,balloonwait,0.01] \![raise,OnDressupMenu,%(reference0)]" //TODO here, like the one below...
}

OnRandomDressup
{
	_command = ""
	foreach currentdressups; _dressup //Remove all current dressups
	{
		if reference0 != "" && _dressup[0,C_BYTE1] != reference0; continue //Skip unless this is for the category we want to randomize
		
		_category = _dressup[0,C_BYTE1]
		_name = _dressup[1,C_BYTE1]
		_command += "\![bind,%(_category),%(_name),0]"
	}
	
	"\C\![lock,balloonrepaint]\![set,autoscroll,disable]"
	--
	"\0%(_command)\![done    removing]"
	--
	_availabledressups = ASORT("string,ascending",availabledressups)
	
	LOGGING("_availabledressups: %(_availabledressups)")
	
	foreach dressupcategories; _category
	{
		if reference0 != "" && _category != reference0; continue //Skip unless this is for the category we want to randomize
		_dressups = IARRAY
		_options = ""
		
		_i = 0
		foreach _availabledressups; _dressup
		{
			if _dressup[0,C_BYTE1] == _category
			{
				if _options == ""; _options = _dressup[2,C_BYTE1]
				_dressups ,= _dressup[1,C_BYTE1]
				
				_availabledressups[_i] = IARRAY
			}
			else
			{
				_i++
			}
		}
		_mustselect = 0; _multiple = 0
		if "mustselect" _in_ _options; _mustselect = 1
		if "multiple" _in_ _options; _multiple = 1
		
		_skipchance = 3 //1/3 chance
		if !_mustselect && RAND(_skipchance) == 0; continue
		
		if !_multiple
		{
			_command += "\![bind,%(_category),%(ANY(_dressups)),1]"
		}
		else
		{
			while ARRAYSIZE(_dressups) >= 1
			{
				_dressup = ANY(_dressups)
				_dressups[LSO] = IARRAY
				if RAND(_skipchance) == 0; continue
				
				_command += "\![bind,%(_category),%(_dressup),1]"
			}
		}
	}
	_command
	--
	"\![set,balloonwait,0.01] \![raise,OnDressupMenu,%(reference0)]" //TODO that is definitely not necessary... I think
}

OnWaterStats : all
{
	_h = "\f[color,default.anchor]"
	_d = "\f[color,default]"
	
	"\0\*\b[4]\_q"
	
	"\f[align,center]%(emdash) Stats %(emdash)\n\n\f[align,default]"
	
	_s = ""; if todayswaters != 1; _s = "s"
	"\![*]%(_h)%(todayswaters)%(_d) drink%(_s) taken this session\n"
	
	_s = ""; if totalwaters != 1; _s = "s"
	"\![*]%(_h)%(totalwaters)%(_d) drink%(_s) taken in total\n"
	"\n"
	_s = ""; if currentdrinkstreak != 1; _s = "s"
	"\![*]Currently on a streak of %(_h)%(currentdrinkstreak)%(_d) drink%(_s)!\n"
	
	_s = ""; if highestdrinkstreak != 1; _s = "s"
	"\![*]Your highest drink streak is %(_h)%(highestdrinkstreak)%(_d) drink%(_s)!\n"
	"\n"
	_s = ""; if extrasipstoday != 1; _s = "s"
	"\![*]%(_h)%(extrasipstoday)%(_d) extra sip%(_s) taken today\n"
	
	_s = ""; if extrasipstotal != 1; _s = "s"
	"\![*]%(_h)%(extrasipstotal)%(_d) extra sip%(_s) taken in total\n\n"
	
	nonoverlap : {
	"(You're doing awesome, keep it up!)"
	"(Good job, keep going!)"
	"(You've got this!)"
	"(Heck yeah!)"
	"(Look at you go!)"
	}
	
	"\n\n\![*]\q[Back,OnMenuRun]\n\![*]\q[Done,OnBlank]"
}


//----------Config Menu----------
OnConfigMenu : all //I moved changing name/pronouns/birthday over to Nameteach, because they're info about the user
{
	//This is here in case the variables get erased. The uninstall will automatically be set to OFF so the user has something to click.
	if deleteshitai == ""; deleteshitai = "OFF"
	if talkrate == ""; {talkrate = "every hour"; aitalkinterval = 3600}
	if AutoUpdates[0] == ""; AutoUpdates[0] = "ON"
	if notif == ""; notif = "None"
	if volume == ""; volume = 50
	if HourNotifs == ""; HourNotifs = "OFF"
	
	"\C\![lock,balloonrepaint]\c\![close,inputbox,OnDrinkTime]\_q\b[4]\f[anchorvisitedfontcolor,default.anchor]\![set,autoscroll,disable]"
	
	"\f[align,center]%(emdash) Config %(emdash)\n\n\f[align,default]"
	
	"Reminder rate:%(br)\![*]\_a[OnChangeTalk]%(talkrate)\_a\n"
	"Reminder sound: \_a[OnChangeNotif]%(notif)\_a\n\n"
	
	"Auto update checks: \![*]\_a[OnToggleAutoUpdates]%(AutoUpdates[0])\_a\n"
	"Check for updates to...\n"
	"\![*]\q[Ghost,OnUpdateCheck,ghost]  \![*]\q[Shell,OnUpdateCheck,shell]  \![*]\q[Balloon,OnUpdateCheck,balloon]\n\n"
	
	"\![*]\q[See the changelog,OnChangeLog,FromMenu]\n\n"
	
	"Reminders while minimized: \![*]\_a[OnToggleRemindWhenMinimized]%(('OFF','ON')[Config.RemindWhenMinimized])\_a\n"
	"Hour notifications: \![*]\_a[OnToggleHourNotifs]%(HourNotifs)\_a\n"
	"Offscreen notifs: \![*]\_a[OnToggleOffscreenTalk]%(('OFF','ON')[Config.OffscreenDialogue])\_a\n"
	"Enable Uninstall? \![*]\_a[OnToggleUninstall]%(deleteshitai)\_a\n\n"
	"\![*]\q[Back,OnMenuRun]\n"
	"\![*]\q[Done,OnBlank]"
	"\![unlock,balloonrepaint]"
}

OnChangeTalk : all
{
	//"\0\_q\s[0]\![open,sliderinput,OnDrinkTime,-1,,0,300]\![set,balloontimeout,-1]"
	"\0\_q\s[0]\![open,inputbox,OnDrinkTime,-1]\![set,balloontimeout,-1]"
	"(How many minutes would you like between reminders? Right now it's %(talkrate).)"
	"\n\n"
	"\![*]\q[Cancel,OnConfigMenu]"
}

OnDrinkTime
{
	"\C\![lock,balloonrepaint]\c"
	--
	if reference0 >= 0 && GETTYPE(reference0) == 1
	{
		aitalkinterval = (reference0 * 60)
		if aitalkinterval <= 300 //if it's less than 5 minutes; the default
		{
			timeouttime = aitalkinterval - 60 //make it 1 minute less than what the user set it to
			if timeouttime <= 60; timeouttime = 30 //If it's less than a minute, make it at least 30 seconds
		}
		else
		{
			timeouttime = 300 //set it to 5 minutes, the default
		}
		timeouttime *= 1000
		
		if reference0 == 0
		{
			talkrate = "off"
		}
		elseif reference0 == 60
		{
			talkrate = "every hour"
		}
		elseif reference0 % 60 == 0
		{
			talkrate = "every %(reference0 / 60) hours"
		}
		elseif (reference0 / 60) >= 1
		{
			_s = ""; if reference0 / 60 != 1; _s = "s"
			_s2 = ""; if reference0 % 60 != 1; _s2 = "s"
			
			talkrate = "every %(reference0 / 60) hour%(_s) and %(reference0 % 60) minute%(_s2)"
		}
		else
		{
			_s = ""; if reference0 != 1; _s = "s"
			
			talkrate = "every %(reference0) minute%(_s)"
		}
		--
		"\![unlock,balloonrepaint]"
		--
		if reference0 == 0
		{
			"\0\s[0](Reminders turned off.)"
		}
		else
		{
			"\0\s[0](You will be reminded %(talkrate).)"
		}
	}
	else
	{
		"\0\s[0]\_q\![open,inputbox,OnDrinkTime,-1]\![set,balloontimeout,-1]"
		--
		"(Invalid input. Please enter a positive integer, or 0 to turn reminders off.)"
		--
		"\n\n"
		--
		"\![*]\q[Cancel,OnConfigMenu]\![unlock,balloonrepaint]"
	}
}

OnChangeNotif : all
{
	_opts = ("Water Drop","Bubbles","Splash","Campana","Stop","Success")
	
	if !ISVAR("Config.IncludeCustomSound"); Config.IncludeCustomSound = "Excluding Custom"
	
	_g = "\f[color,disable]"
	_d = "\f[color,default]"
	
	_vol_up = "\q[▲,OnQuickVolume,Up]"
	if volume >= 100; _vol_up = "%(_g)▲%(_d)"
	_vol_down = "\q[▼,OnQuickVolume,Down]"
	if volume <= 0; _vol_down = "%(_g)▼%(_d)"
	
	"\C\![lock,balloonrepaint]\c\0\b2\_q\![set,autoscroll,disable]\*"
	"\![close,dialog,OnPickCustomNotif]"
	"\f[align,center]%(emdash) Reminder Sound %(emdash)\n\n[half]\f[align,left]"
	
	"Volume: %(_vol_up)%(_vol_down) %(volume)\n\n[half]"
	
	if notif == "None"; "\![*]"
	"\__q[OnNotifSet,None]None\__q\n"
	
	if notif == "Custom"; "\![*]"
	"\__q[OnNotifSet,Custom]Custom\__q \__q[OnCustomNotif](Pick sound)\__q\n"
	
	if notif == "Random"; "\![*]"
	"\__q[OnNotifSet,Random]Random Each Time\__q\n\__q[OnToggleIncludeCustom](Custom %(('excluded','included')[Config.IncludeCustomSound]))\__q\n\n[half]"
	
	foreach _opts; _opt
	{
		if notif == _opt; "\![*]"
		"\__q[OnNotifSet,%(_opt)]%(_opt)\__q\n"
	}
	
	"\n[half]\![*]\q[Back,OnConfigMenu]\![unlock,balloonrepaint]"
}

//Up/Down volume buttons
OnQuickVolume
{
	if reference0 == "Up"; volume += 5
	else; volume -= 5
	
	if volume > 100; volume = 100
	if volume < 0; volume = 0
	
	OnChangeNotif
}

OnNotifSet
{
	notif = reference0
	"\C\![sound,stop]%(notification_sound)\![raise,OnChangeNotif]"
}

OnCustomNotif : all
{
	_h = "\f[color,default.anchor]"
	_d = "\f[color,default]"
	
	"\0\_q\b2\![set,autoscroll,disable]\![open,dialog,open,--id=OnPickCustomNotif]\*"
	
	"(Choose a sound file. Supported types are %(_h).mp3%(_d), %(_h).wav%(_d), %(_h).wma%(_d), and %(_h).mid%(_d).)\n\n"
	
	"(If sound files give an error, or you would like access to more file types including %(_h).flac%(_d), %(_h).ogg%(_d), or %(_h).m4a%(_d), please consider installing \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAV Filters\_a.)\n\n"
	
	"\![*]\q[Cancel,OnChangeNotif]"
}

OnPickCustomNotif
{
	notif = "Custom"
	custom_sound_path = reference2
	"\C\![sound,stop]%(notification_sound)\![raise,OnChangeNotif]"
}

OnSystemDialogCancel
{
	if reference1 == "OnPickCustomNotif"; "\C\![sound,stop]\![raise,OnChangeNotif]"
}

OnToggleIncludeCustom
{
	if Config.IncludeCustomSound != 1; Config.IncludeCustomSound = 1
	else; Config.IncludeCustomSound = 0
	OnChangeNotif
}

OnUpdateCheck
{
	if reference0 == "ghost"; "\![updatebymyself]"
	elseif reference0 == "balloon"; "\![update,balloon]"
	else; "\![update,shell]"
}

OnToggleAutoUpdates
{
	if AutoUpdates[0] != "ON"; AutoUpdates[0] = "ON"
	else; AutoUpdates[0] = "OFF"
	
	OnConfigMenu
}

OnToggleRemindWhenMinimized
{
	if Config.RemindWhenMinimized != 1; Config.RemindWhenMinimized = 1
	else; Config.RemindWhenMinimized = 0
	OnConfigMenu
}

OnToggleHourNotifs
{
	if HourNotifs != "ON"; HourNotifs = "ON"
	else; HourNotifs = "OFF"
	
	OnConfigMenu
}

OnToggleOffscreenTalk
{
	if Config.OffscreenDialogue != 1; Config.OffscreenDialogue = 1
	else; Config.OffscreenDialogue = 0
	OnConfigMenu
}

OnToggleUninstall
{
	if deleteshitai != "ON"; deleteshitai = "ON"
	else; deleteshitai = "OFF"
	
	OnConfigMenu
}

//----------Misc Functions----------

OnChoiceTimeout
{
	if "drinknotif" _in_ reference0
	{
		currentdrinkstreak = 0
		newhighscorelatch = 0
	}
}

//---Stuff from Aitalk---

OnAITalk
{
	_talk = ReminderTalk
	if nowshell == "Alkohol"; _talk = Wobble(_talk,0,0,currentdrinkstreak)
	_talk = "\0\s[0]%(notification_sound)" + _talk
	_talk += "\![set,choicetimeout,%(timeouttime)]\n\n\![*]\q[Done,drankwater]\n\n[half]\![*]\q[Dismiss,dismisswater]\e drinknotif"
	_talk
}

ReminderTalk : nonoverlap
{
	"(It's time to drink some water!)"
	"(You should take a sip of water.)"
	"(Stay hydrated! Take a sip of water if you haven't lately.)"
	"(It's time for a sip of water!)"
	"(You should get a drink!)"
	"(Get a drink and move around a little!)"
}

Select.drankwater : nonoverlap
{
	todayswaters++
	totalwaters++
	currentdrinkstreak++
	
	if !ISVAR("highestdrinkstreak"); highestdrinkstreak = 0
	if !ISVAR("newhighscorelatch"); newhighscorelatch = 0
	_newhighscorecomment = 0
	
	//Unset latch if it's gotten mixed up somehow and we logically *cannot* be on a new high score streak
	if newhighscorelatch == 1 && currentdrinkstreak < highestdrinkstreak; newhighscorelatch = 0
	
	//Don't start saying this until you get 3 in a row I think??
	//This will completely not track a streak unless you get at least 3...
	if currentdrinkstreak > highestdrinkstreak && currentdrinkstreak >= 3
	{
		highestdrinkstreak = currentdrinkstreak
		
		if newhighscorelatch == 0
		{
			_newhighscorecomment = 1
			newhighscorelatch = 1 //suppress further comments until streak is broken
		}
	}
	
	_talk = ""
	if currentdrinkstreak == 3
	{
		_talk = StreakStartDrink

	}
	elseif _newhighscorecomment
	{
		_talk = NewStreakHighScoreDrink
	}
	elseif totalwaters % 100 == 0
	{
		_talk = MilestoneDrink
		
	}
	elseif currentdrinkstreak % 5 == 0 //TODO maybe add a further comment if you're on a high score streak...? hm
	{
		_talk = StreakDrink
	}
	else
	{
		_talk = GeneralDrink
	}
	
	if nowshell == "Alkohol"; _talk = Wobble(_talk,0,0,currentdrinkstreak)
	_talk = "\0\s[0]" + _talk
	
	_amt = currentdrinkstreak * 100
	if _amt > 10000; _amt = 10000 //100 max - lets not do a hyponatremia
	if _amt == 800; _amt = 820
	_talk += "\![raiseplugin,c58b6320-caf8-11ed-a901-0800200c9a66,OnWalletOfUnyu,set,%(_amt),Thanks for hydrating!]"
	_talk
}

Select.dismisswater
{
	currentdrinkstreak = 0
	newhighscorelatch = 0
}

StreakStartDrink : nonoverlap
{
	"(You've reached a streak of drinks, good job! Keep it up!)"
	"(You've started a streak! Keep going!)"
	"(You're doing really well, you've started a streak!)"
	"(3 drink combo! Keep going!)"
}

GeneralDrink : nonoverlap
{
	"(Good job!)"
	"(Well done!)"
	"(Keep it up!)"
	"(Excellent!)"
	"(Great!)"
	"(Thank you!)"
	"(Heck yeah,\w4 hydration!)"
	"(Awesome!)"
	"(You're great!)"
	"(You're rad!)"
	"(Fresh!)"
	"(You did it!)"
	"(Powerful!)"
	"(Look at you go!)"
}

StreakDrink : nonoverlap
{
	"(That's %(currentdrinkstreak) drinks in a row! Way to go!)"
	"(%(currentdrinkstreak) strong! You're doing awesome!)"
	"(%(currentdrinkstreak) so far! Awesome!)"
	"(You've had %(currentdrinkstreak) so far! That's really great, good job!)"
}

MilestoneDrink : nonoverlap
{
	"(You've reached %(totalwaters) total timed drinks, good job!)"
	"(You've reached %(totalwaters) total timed drinks, you're a hydration pro!)"
	"(You've reached %(totalwaters) total timed drinks, fantastic!)"
	"(You've reached %(totalwaters) total timed drinks, look at you go!)"
}

NewStreakHighScoreDrink
{
	"(You've reached a new high score of %(highestdrinkstreak) drinks in a row! Way to go!)"
	"(New high score! %(highestdrinkstreak) drinks in a row! Incredible!)"
}

OnMinuteChange
{
	if minute == 0
	{
		if hour == 0
		{
			AutoUpdates[1] = 0
			AutoUpdates[3] = 0
			AutoUpdates[4] = 0
			AutoUpdates[5] = 0
		}
		OnHourTalk
	}
	--
	if AutoUpdates[0] == "ON" && AutoUpdates[1] == 0 //Once a day the ghost will check for updates if the user has auto updates on
	{
		AutoUpdates[1] = 1
		AutoUpdates[3] = 0
		AutoUpdates[4] = 0
		AutoUpdates[5] = 0
		"\![update,ghost,checkonly]"
	}
}

OnHourTalk
{
	if HourNotifs == "ON"; HourNotification
	--
	OnHydrateGhost.GetStats
	--
	SendOldStats //Deprecated version
}

OnSecondChange
{
	//TODO set up a proper runtime counter later...
	if passsec >= 59
	{
		passsec = 0
		passmin++
		if passmin >= 59
		{
			passmin = 0
			passhour++
		}
	}
	else
	{
		passsec++
	}
	
	//Reminders when minimized - for cases such as being overstimulated and needed to minimize what you have open, but still wanting water reminders! No streak or drink tracking available in this mode...
	if IsMinimized && Config.RemindWhenMinimized
	{
		//Based on the aitalkinterval stuff in the shiori3.dic file...
		if aitalkinterval > 0
		{
			_sec = GETSECCOUNT
			_diff = _sec - SHIORI3FW.LastAITalkTime
			if _diff >= aitalkinterval
			{
				if (_sec - SHIORI3FW.LastTalkTime) >= 6
				{
					if (_sec - SHIORI3FW.TalkEndTime) >= 6
					{
						if SHIORI3FW.IsAITalkComplete == 0
						{
							//Send a notif banner with the appropriate text...
							//Adjusting the last talk time here because that way it doesn't screw with the timing of your reminders
							_dialogue = ReminderTalk
							_command = "\![set,trayballoon,--text=""%(_dialogue)"",--title=Hydrate reminder,--icon=info]"
							
							SHIORI3FW.PushAdditionalReturn('ValueNotify',_command)
							SHIORI3FW.ResetAITalkInterval(0)
						}
					}
				}
			}
		}
	}
	
	//Create arrays if none exist
	if !ISVAR("ErrorsToPush.level"); ErrorsToPush.level = IARRAY
	if !ISVAR("ErrorsToPush.description"); ErrorsToPush.description = IARRAY

	if ARRAYSIZE(ErrorsToPush.level) > 0 //If there are errors
	{
		_levels = ""
		_descriptions = ""
		for _i = 0; _i < ARRAYSIZE(ErrorsToPush.level); _i++ //CHR(1) in here is the divider between errors
		{
			if _i > 0; {_levels += CHR(1); _descriptions += CHR(1)}
			_levels += ErrorsToPush.level[_i]
			_descriptions += ErrorsToPush.description[_i]
		}
		//Push the whole list of errors together
		SHIORI3FW.PushAdditionalReturn('ErrorLevel',_levels)
		SHIORI3FW.PushAdditionalReturn('ErrorDescription',_descriptions)
		
		//Clear the arrays so we don't send any more errors later
		ErrorsToPush.level = IARRAY
		ErrorsToPush.description = IARRAY
	}
}

OnKeyPress
{
	if reference0 == "f1"; "\![open,readme]"
	elseif reference0 == "t" && SHIORI3FW.DebugMode; OnAITalk
}